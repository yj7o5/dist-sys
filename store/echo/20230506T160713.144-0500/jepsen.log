2023-05-06 16:07:13,192{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin maelpher-echo --node-count 1 --time-limit 10
2023-05-06 16:07:13,255{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x71737478"
         "maelstrom.db$db$reify__16142@71737478"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x11303cb" "2023-05-06T16:07:13.144-05:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x655e3f4c"
         "maelstrom.net$jepsen_net$reify__15251@655e3f4c"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x26e74d50"
         "maelstrom.workload.echo$client$reify__16863@26e74d50"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x6bdc984"
         "java.util.concurrent.CyclicBarrier@6bdc984"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x1f299fc3"
         "jepsen.checker$compose$reify__11881@1f299fc3"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "maelpher-echo"
  "--node-count"
  "1"
  "--time-limit"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@b997735"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@178826db"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "maelpher-echo"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 10000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x5d4f0fd5"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@5d4f0fd5"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x2092b072"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@2092b072"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x504521ae"
                                                    "maelstrom.workload.echo$workload$fn__16882@504521ae"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x4a9e6ea7"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x6f8af186"
         "maelstrom.net$jepsen_os$reify__15254@6f8af186"]
 :time-limit 10
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-05-06 16:07:15,064{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-05-06 16:07:15,065{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-05-06 16:07:15,066{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-05-06 16:07:15,070{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-05-06 16:07:15,073{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-05-06 16:07:15,074{GMT}	INFO	[jepsen node n0] maelstrom.process: launching maelpher-echo []
2023-05-06 16:07:25,095{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2023-05-06 16:07:26,101{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2023-05-06 16:07:26,104{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n0 crashed with exit status 2. Before crashing, it wrote to STDOUT:



And to STDERR:

panic: assignment to entry in nil map

goroutine 1 [running]:
github.com/jepsen-io/maelstrom/demo/go.(*Node).Handle(0xc00010c000, {0x10e60bd, 0x4}, 0xc000014370)
	/Users/yawarjamal/go/pkg/mod/github.com/jepsen-io/maelstrom/demo/go@v0.0.0-20230424133947-f6f4fd0d64fe/node.go:71 +0x6e
main.main()
	/Users/yawarjamal/projects/maelpher/main.go:13 +0x7c

Full STDERR logs are available in /Users/yawarjamal/projects/maelpher/store/echo/20230506T160713.144-0500/node-logs/n0.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16142.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__8744$G__8725__8748.invoke(db.clj:12)
	at jepsen.db$fn__8744$G__8724__8753.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:835)
